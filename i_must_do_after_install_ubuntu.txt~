一、安装搜狗拼音输入法
1：卸载fcitx
sudo apt-get --purge fcitx*
2：清理系统内的无用的软件包
sudo apt-get --purge autoremove
3：到搜狗官网下载搜狗拼音输入法，选择你系统对应的软件包，我系统是64位的，所以我选择了amd64的
http://pinyin.sogou.com/linux/?r=pinyin
4：用gdebi这个软件安装，它能够安装所有依赖关系，如果你没有安装gdebi，请先安装该软件；我用的是
这种方法，其它的方法我没试过，所以不知道行不行
sudo gdebi sogou_pinyin_linux_1.0.0.0014_amd64.deb
5:注销下系统就可以了

二、给chromium安装 flash player
sudo apt-get install pepperflashplugin-nonfree
sudo update-pepperflashplugin-nonfree --install

或者，推荐更好的办法，装chrome,这个flash player 直接正常使用.
1.添加PPA
从Google Linux Repository（http://www.google.com/linuxrepositories/）下载安装Key，或把下面的代码复制进终端，回车，需要管理员密码
wget -q -O - 
https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
Key安装好后，在终端输入：
sudo sh -c 'echo "deb 
http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
2.更新
在终端输入：sudo apt-get update
3.安装
安装稳定版Chrome，在终端输入：sudo apt-get install google-chrome-stable
安装Beta版Chrome，在终端输入：sudo apt-get install google-chrome-beta
安装不稳定版Chrome，在终端输入：sudo apt-get install google-chrome-unstable

三、Install git
sudo apt-get install git
git config --global user.name "R-T-Regent"
git config --global user.email "r_t_regent@foxmail.com"
ssh-keygen -t rsa -C "r_t_regent@foxmail.com"
git clone git@github.com:r-t-regent/***.git
git add
git commit -m "..."
git push / pull

四、ubuntu linux下建立stm32开发环境: GCC安装以及工程Makefile建立
一  STM 32 GCC 安装
stm32 属于arm cortex-m系列thumb指令集,所以给arm用的arm-none-eabi就可以了,首先是下载
下载地址:https://launchpad.net/gcc-arm-embedded/+download
下载其中的gcc-arm-none-eabi-version-linux.tar.bz2
解压到你知道的目录会产生 gcc-arm-none-eabi的文件夹
把该编译器添加到你的环境中:
sudo gedit  ~/.bashrc
在最后一行添加:
export PATH=$PATH:/your_stm_gcc_dir/gcc-arm-none-eabi-4_8-2013q4/bin
两个编译器环境中间用冒号隔开;

注销后测试:arm-none-eabi-gcc -v
新建个工程文件夹,及其目录
mkdir stm_project
cd stm_project
mkdir libs
mkdir src
mkdir inc
下载最新的官方库:http://www.stmicroelectronics.com.cn/stonline/stappl/productcatalog/app?page=partNumberSearchPage&levelid=SS1031&parentid=1734&resourcetype=SW
解压,把解压好的文件夹复制到刚才新建的libs里面.
在工程根目录下新建Makefile.common文件,这个为通用makefile
# include Makefile

#This file is included in the general Makefile, the libs Makefile and the src Makefile
#Different optimize settings for library and source files can be realized by using arguments
#Compiler optimize settings:
# -O0 no optimize, reduce compilation time and make debugging produce the expected results (default).
# -O1 optimize, reduce code size and execution time, without much increase of compilation time.
# -O2 optimize, reduce code execution time compared to ‘O1’, increase of compilation time.
# -O3 optimize, turns on all optimizations, further increase of compilation time.
# -Os optimize for size, enables all ‘-O2’ optimizations that do not typically increase code size and other code size optimizations.
#Recommended optimize settings for release version: -O3
#Recommended optimize settings for debug version: -O0
#Valid parameters :
# OptLIB=0 --> optimize library files using the -O0 setting
# OptLIB=1 --> optimize library files using the -O1 setting
# OptLIB=2 --> optimize library files using the -O2 setting
# OptLIB=3 --> optimize library files using the -O3 setting
# OptLIB=s --> optimize library files using the -Os setting
# OptSRC=0 --> optimize source files using the -O0 setting
# OptSRC=1 --> optimize source files using the -O1 setting
# OptSRC=2 --> optimize source files using the -O2 setting
# OptSRC=3 --> optimize source files using the -O3 setting
# OptSRC=s --> optimize source files using the -Os setting
# all --> build all
# libs --> build libs only
# src --> build src only
# clean --> clean project
# tshow --> show optimize settings
#Example:
# make OptLIB=3 OptSRC=0 all tshow
 
TOP=$(shell readlink -f "$(dir $(lastword $(MAKEFILE_LIST)))")
PROGRAM=main
LIBDIR=$(TOP)/libs
 
#Adust the following line to the library in use
#=========add by embbnux 根据你的库不同,调整这个地方的库目录地址====================#
&nbsp;STMLIB=$(LIBDIR)/STM32_USB-FS-Device_Lib_V4.0.0/Libraries
#=========add by embbnux 根据你的stm32芯片型号容量不同,修改这个地方的TypeOfMCU=======#
#Adjust TypeOfMCU in use, see CMSIS file "stm32f10x.h"#STM32F103RBT (128KB FLASH, 20KB RAM) --> STM32F10X_MD#TypeOfMCU=STM32F10X_MD#STM32F103RET (512KB FLASH, 64KB RAM) --> STM32F10X_HD#STM32F103ZET (512KB FLASH, 64KB RAM) --> STM32F10X_HD
#============================================================================#
TypeOfMCU=STM32F10X_HD
#============================================================================#
TC=arm-none-eabi
CC=$(TC)-gcc
LD=$(TC)-ld -v
OBJCOPY=$(TC)-objcopy
AR=$(TC)-ar
GDB=$(TC)-gdb
INCLUDE=-I$(TOP)/inc
INCLUDE+=-I$(STMLIB)/CMSIS/Include
INCLUDE+=-I$(STMLIB)/CMSIS/Device/ST/STM32F10x/Include
INCLUDE+=-I$(STMLIB)/CMSIS/Device/ST/STM32F10x/Source/Templates
INCLUDE+=-I$(STMLIB)/STM32F10x_StdPeriph_Driver/inc
INCLUDE+=-I$(STMLIB)/STM32_USB-FS-Device_Driver/inc
COMMONFLAGS=-g -mcpu=cortex-m3 -mthumb
COMMONFLAGSlib=$(COMMONFLAGS)
#Commands for general Makefile and src Makefile
ifeq ($(OptSRC),0)
&nbsp;&nbsp; &nbsp;COMMONFLAGS+=-O0
&nbsp;&nbsp; &nbsp;InfoTextSrc=src (no optimize, -O0)
else ifeq ($(OptSRC),1)
&nbsp;&nbsp; &nbsp;COMMONFLAGS+=-O1
&nbsp;&nbsp; &nbsp;InfoTextSrc=src (optimize time+ size+, -O1)
else ifeq ($(OptSRC),2)
&nbsp;&nbsp; &nbsp;COMMONFLAGS+=-O2
&nbsp;&nbsp; &nbsp;InfoTextSrc=src (optimize time++ size+, -O2)
else ifeq ($(OptSRC),s)
&nbsp;&nbsp; &nbsp;COMMONFLAGS+=-Os
&nbsp;&nbsp; &nbsp;InfoTextSrc=src (optimize size++, -Os)
else
&nbsp;&nbsp; &nbsp;COMMONFLAGS+=-O3
&nbsp;&nbsp; &nbsp;InfoTextSrc=src (full optimize, -O3)
endif
CFLAGS+=$(COMMONFLAGS) -Wall -Werror $(INCLUDE)
CFLAGS+=-D $(TypeOfMCU)
CFLAGS+=-D VECT_TAB_FLASH
 
#Commands for libs Makefile
ifeq ($(OptLIB),0)
&nbsp;&nbsp; &nbsp;COMMONFLAGSlib+=-O0
&nbsp;&nbsp; &nbsp;InfoTextLib=libs (no optimize, -O0)
else ifeq ($(OptLIB),1)
&nbsp;&nbsp; &nbsp;COMMONFLAGSlib+=-O1
&nbsp;&nbsp; &nbsp;InfoTextLib=libs (optimize time+ size+, -O1)
else ifeq ($(OptLIB),2)
&nbsp;&nbsp; &nbsp;COMMONFLAGSlib+=-O2
&nbsp;&nbsp; &nbsp;InfoTextLib=libs (optimize time++ size+, -O2)
else ifeq ($(OptLIB),s)
&nbsp;&nbsp; &nbsp;COMMONFLAGSlib+=-Os
&nbsp;&nbsp; &nbsp;InfoTextLib=libs (optimize size++, -Os)
else
&nbsp;&nbsp; &nbsp;COMMONFLAGSlib+=-O3
&nbsp;&nbsp; &nbsp;InfoTextLib=libs (full optimize, -O3)
endif
CFLAGSlib+=$(COMMONFLAGSlib) -Wall -Werror $(INCLUDE)
CFLAGSlib+=-D $(TypeOfMCU)
CFLAGSlib+=-D VECT_TAB_FLASH

编译库文件:进入libs文件夹,新建Makefile:
# libs Makefile
include ../Makefile.common
LIBS+=libstm32.a
CFLAGSlib+=-c
 
all: libs
 
libs: $(LIBS)
 
libstm32.a:
 @echo -n "Building $@ ..."
 @cd $(STMLIB)/CMSIS/Device/ST/STM32F10x/Source/Templates && \
 $(CC) $(CFLAGSlib) \
 system_stm32f10x.c
 @cd $(STMLIB)/STM32F10x_StdPeriph_Driver/src && \
 $(CC) $(CFLAGSlib) \
 -D"assert_param(expr)=((void)0)" \
 -I../../CMSIS/Include \
 -I../../CMSIS/Device/ST/STM32F10x/Include \
 -I../inc \
 *.c
# @cd $(STMLIB)/STM32_USB-FS-Device_Driver/src && \
# $(CC) $(CFLAGSlib) \
# -D"assert_param(expr)=((void)0)" \
# -I../../CMSIS/Include \
# -I../../CMSIS/Device/ST/STM32F10x/Include \
# -I../inc \
# *.c
 @$(AR) cr $(LIBDIR)/$@ \
 $(STMLIB)/CMSIS/Device/ST/STM32F10x/Source/Templates/system_stm32f10x.o \
 $(STMLIB)/STM32F10x_StdPeriph_Driver/src/*.o \
# $(STMLIB)/STM32_USB-FS-Device_Driver/src/*.o
 @echo "done."
.PHONY: libs clean tshow
 
clean:
 rm -f $(STMLIB)/CMSIS/Device/ST/STM32F10x/Source/Templates/system_stm32f10x.o
 rm -f $(STMLIB)/STM32F10x_StdPeriph_Driver/src/*.o
 rm -f $(STMLIB)/STM32_USB-FS-Device_Driver/src/*.o
 rm -f $(LIBS)
tshow:
 @echo "######################################################################################################"
 @echo "################# optimize settings: $(InfoTextLib), $(InfoTextSrc)"
 @echo "######################################################################################################"

编译该库:
make clean
make
就会在lib目录下生成libstm32.a,这个就是编译好的静态库了.

建立工程编译ld文件
这个ld文件,为在编译时告诉编译器把代码放到什么地址,根据芯片的内存以及flash容量不同有所调整
在工程根目录下新建linker.ld文件
这里说明需要修改的地方,根据芯片型号不同,选择相应的RAM FLASH大小
MEMORY {
 /*Adust LENGTH to RAMsize of target MCU:*/
 /*STM32F103RBT --> 20K*/
 /*RAM (RWX) : ORIGIN = 0x20000000 , LENGTH = 20K*/
 /*STM32F103RET --> 64K*/
 /*STM32F103ZET --> 64K*/
 RAM (RWX) : ORIGIN = 0x20000000 , LENGTH = 64K
 EXTSRAM (RWX) : ORIGIN = 0x68000000 , LENGTH = 0
 /*Adust LENGTH to (FLASHsize - FeePROMsize) of target MCU:*/
 /*STM32F103RBT --> 126K*/
 FLASH (RX) : ORIGIN = 0x08000000 , LENGTH = 126K
 /*STM32F103RET --> 508K*/
 /*FLASH (RX) : ORIGIN = 0x08000000 , LENGTH = 508K*/
 /*STM32F103ZET --> 508K*/
 FLASH (RX) : ORIGIN = 0x08000000 , LENGTH = 508K
 /*Adust ORIGIN to (0x08000000 + (FLASHsize-FeePROMsize)) of target MCU*/
 /*and adust LENGTH to FeePROMsize allocated:*/
 /*STM32F103RBT --> 0x08000000+126K, 2K*/
 EEMUL (RWX) : ORIGIN = 0x08000000+126K, LENGTH = 2K
 /*STM32F103RET --> 0x08000000+508K, 4K*/
 /*EEMUL (RWX) : ORIGIN = 0x08000000+508K, LENGTH = 4K*/
}

在工程根目录下新建Makefile文件:
# general Makefile
 
include Makefile.common
LDFLAGS=$(COMMONFLAGS) -fno-exceptions -ffunction-sections -fdata-sections -L$(LIBDIR) -nostartfiles -Wl,--gc-sections,-Tlinker.ld
 
LDLIBS+=-lm
LDLIBS+=-lstm32
 
STARTUP=startup.c
 
all: libs src
 $(CC) -o $(PROGRAM).elf $(LDFLAGS) \
 -Wl,--whole-archive \
 src/app.a \
 -Wl,--no-whole-archive \
 $(LDLIBS)
 $(OBJCOPY) -O ihex $(PROGRAM).elf $(PROGRAM).hex
 $(OBJCOPY) -O binary $(PROGRAM).elf $(PROGRAM).bin
#Extract info contained in ELF to readable text-files:
 arm-none-eabi-readelf -a $(PROGRAM).elf > $(PROGRAM).info_elf
 arm-none-eabi-size -d -B -t $(PROGRAM).elf > $(PROGRAM).info_size
 arm-none-eabi-objdump -S $(PROGRAM).elf > $(PROGRAM).info_code
 arm-none-eabi-nm -t d -S --size-sort -s $(PROGRAM).elf > $(PROGRAM).info_symbol
 
.PHONY: libs src clean tshow
 
libs:
 $(MAKE) -C libs $@
src:
 $(MAKE) -C src $@
clean:
 $(MAKE) -C src $@
 $(MAKE) -C libs $@
 rm -f $(PROGRAM).elf $(PROGRAM).hex $(PROGRAM).bin $(PROGRAM).info_elf $(PROGRAM).info_size
 rm -f $(PROGRAM).info_code
 rm -f $(PROGRAM).info_symbol
tshow:
 @echo "######################################################################################################"
 @echo "################# optimize settings: $(InfoTextLib), $(InfoTextSrc)"
 @echo "######################################################################################################"
差不多就好了,在src里面添加测试源码.
然后进入工程主目录,下make就好了.

make clean
make OptLIB=0 OptSRC=0 all tshow

五、ubuntu linux下建立stm32开发环境: 程序烧录 openocd+openjtag
http://www.embbnux.com/2014/02/01/linux_stm32_use_openocd_openjtag/
